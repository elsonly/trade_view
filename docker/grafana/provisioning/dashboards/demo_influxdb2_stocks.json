{
  "annotations": {
    "list": [
      {
        "builtIn": 1,
        "datasource": "-- Grafana --",
        "enable": true,
        "hide": true,
        "iconColor": "rgba(0, 211, 255, 1)",
        "name": "Annotations & Alerts",
        "target": {
          "limit": 100,
          "matchAny": false,
          "tags": [],
          "type": "dashboard"
        },
        "type": "dashboard"
      }
    ]
  },
  "editable": true,
  "fiscalYearStartMonth": 0,
  "graphTooltip": 0,
  "id": 9,
  "iteration": 1648453806146,
  "links": [],
  "liveNow": false,
  "panels": [
    {
      "description": "",
      "fieldConfig": {
        "defaults": {
          "color": {
            "mode": "palette-classic"
          },
          "custom": {
            "axisLabel": "",
            "axisPlacement": "auto",
            "barAlignment": 0,
            "drawStyle": "line",
            "fillOpacity": 0,
            "gradientMode": "none",
            "hideFrom": {
              "legend": false,
              "tooltip": false,
              "viz": false
            },
            "lineInterpolation": "linear",
            "lineWidth": 1,
            "pointSize": 5,
            "scaleDistribution": {
              "type": "linear"
            },
            "showPoints": "auto",
            "spanNulls": false,
            "stacking": {
              "group": "A",
              "mode": "none"
            },
            "thresholdsStyle": {
              "mode": "off"
            }
          },
          "mappings": [],
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "green",
                "value": null
              },
              {
                "color": "red",
                "value": 80
              }
            ]
          }
        },
        "overrides": []
      },
      "gridPos": {
        "h": 11,
        "w": 12,
        "x": 0,
        "y": 0
      },
      "id": 2,
      "options": {
        "candleStyle": "candles",
        "colorStrategy": "open-close",
        "colors": {
          "down": "red",
          "up": "green"
        },
        "includeAllFields": false,
        "legend": {
          "calcs": [],
          "displayMode": "list",
          "placement": "bottom"
        },
        "mode": "candles+volume"
      },
      "targets": [
        {
          "datasource": {
            "type": "influxdb",
            "uid": "P3C6603E967DC8568"
          },
          "query": "data = from(bucket:\"sino_quotes\")\r\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\r\n  |> filter(fn: (r) => r._measurement == \"tick\")\r\n  |> filter(fn: (r) => r.code == ${Code1:doublequote})\r\n  |> filter(fn: (r) => r._field == \"close\")\r\n  |> drop(columns: [\"code\", \"_measurement\"])\r\n\r\ndata_open = data\r\n  |> aggregateWindow(every: ${Kbar_Freq}, fn: first)\r\n  |> set(key: \"_field\", value: \"open\")\r\n\r\ndata_close = data\r\n  |> aggregateWindow(every: ${Kbar_Freq}, fn: last)\r\n  |> set(key: \"_field\", value: \"close\")\r\n\r\ndata_high = data\r\n  |> aggregateWindow(every: ${Kbar_Freq}, fn: max)\r\n  |> set(key: \"_field\", value: \"high\")\r\n\r\ndata_low = data\r\n  |> aggregateWindow(every: ${Kbar_Freq}, fn: min)\r\n  |> set(key: \"_field\", value: \"low\")\r\n\r\n\r\ndata_vol = from(bucket:\"sino_quotes\")\r\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\r\n  |> filter(fn: (r) => r._measurement == \"tick\")\r\n  |> filter(fn: (r) => r.code == ${Code1:doublequote})\r\n  |> filter(fn: (r) => r._field == \"volume\")\r\n  |> drop(columns: [\"code\", \"_measurement\"])\r\n  |> aggregateWindow(every: ${Kbar_Freq}, fn: sum)\r\n  //|> set(key: \"_field\", value: \"volume\")\r\n\r\nunion(tables: [data_open, data_close, data_high, data_low, data_vol])\r\n",
          "refId": "A"
        }
      ],
      "title": "(1)  ${Code1}",
      "type": "candlestick"
    },
    {
      "description": "",
      "fieldConfig": {
        "defaults": {
          "color": {
            "mode": "palette-classic"
          },
          "custom": {
            "axisLabel": "",
            "axisPlacement": "auto",
            "barAlignment": 0,
            "drawStyle": "line",
            "fillOpacity": 0,
            "gradientMode": "none",
            "hideFrom": {
              "legend": false,
              "tooltip": false,
              "viz": false
            },
            "lineInterpolation": "linear",
            "lineWidth": 1,
            "pointSize": 5,
            "scaleDistribution": {
              "type": "linear"
            },
            "showPoints": "auto",
            "spanNulls": false,
            "stacking": {
              "group": "A",
              "mode": "none"
            },
            "thresholdsStyle": {
              "mode": "off"
            }
          },
          "mappings": [],
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "green",
                "value": null
              },
              {
                "color": "red",
                "value": 80
              }
            ]
          }
        },
        "overrides": []
      },
      "gridPos": {
        "h": 11,
        "w": 12,
        "x": 12,
        "y": 0
      },
      "id": 3,
      "options": {
        "candleStyle": "candles",
        "colorStrategy": "open-close",
        "colors": {
          "down": "red",
          "up": "green"
        },
        "includeAllFields": false,
        "legend": {
          "calcs": [],
          "displayMode": "list",
          "placement": "bottom"
        },
        "mode": "candles+volume"
      },
      "targets": [
        {
          "datasource": {
            "type": "influxdb",
            "uid": "P3C6603E967DC8568"
          },
          "query": "data = from(bucket:\"sino_quotes\")\r\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\r\n  |> filter(fn: (r) => r._measurement == \"tick\")\r\n  |> filter(fn: (r) => r.code == ${Code2:doublequote})\r\n  |> filter(fn: (r) => r._field == \"close\")\r\n  |> drop(columns: [\"code\", \"_measurement\"])\r\n\r\ndata_open = data\r\n  |> aggregateWindow(every: ${Kbar_Freq}, fn: first)\r\n  |> set(key: \"_field\", value: \"open\")\r\n\r\ndata_close = data\r\n  |> aggregateWindow(every: ${Kbar_Freq}, fn: last)\r\n  |> set(key: \"_field\", value: \"close\")\r\n\r\ndata_high = data\r\n  |> aggregateWindow(every: ${Kbar_Freq}, fn: max)\r\n  |> set(key: \"_field\", value: \"high\")\r\n\r\ndata_low = data\r\n  |> aggregateWindow(every: ${Kbar_Freq}, fn: min)\r\n  |> set(key: \"_field\", value: \"low\")\r\n\r\n\r\ndata_vol = from(bucket:\"sino_quotes\")\r\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\r\n  |> filter(fn: (r) => r._measurement == \"tick\")\r\n  |> filter(fn: (r) => r.code == ${Code2:doublequote})\r\n  |> filter(fn: (r) => r._field == \"volume\")\r\n  |> drop(columns: [\"code\", \"_measurement\"])\r\n  |> aggregateWindow(every: ${Kbar_Freq}, fn: sum)\r\n\r\nunion(tables: [data_open, data_close, data_high, data_low, data_vol])\r\n",
          "refId": "A"
        }
      ],
      "title": "(2)  ${Code2}",
      "type": "candlestick"
    },
    {
      "description": "",
      "fieldConfig": {
        "defaults": {
          "color": {
            "mode": "palette-classic"
          },
          "custom": {
            "axisLabel": "",
            "axisPlacement": "auto",
            "barAlignment": 0,
            "drawStyle": "line",
            "fillOpacity": 0,
            "gradientMode": "none",
            "hideFrom": {
              "legend": false,
              "tooltip": false,
              "viz": false
            },
            "lineInterpolation": "linear",
            "lineWidth": 1,
            "pointSize": 5,
            "scaleDistribution": {
              "type": "linear"
            },
            "showPoints": "auto",
            "spanNulls": false,
            "stacking": {
              "group": "A",
              "mode": "none"
            },
            "thresholdsStyle": {
              "mode": "off"
            }
          },
          "mappings": [],
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "green",
                "value": null
              },
              {
                "color": "red",
                "value": 80
              }
            ]
          }
        },
        "overrides": []
      },
      "gridPos": {
        "h": 11,
        "w": 12,
        "x": 0,
        "y": 11
      },
      "id": 4,
      "options": {
        "candleStyle": "candles",
        "colorStrategy": "open-close",
        "colors": {
          "down": "red",
          "up": "green"
        },
        "includeAllFields": false,
        "legend": {
          "calcs": [],
          "displayMode": "list",
          "placement": "bottom"
        },
        "mode": "candles+volume"
      },
      "targets": [
        {
          "datasource": {
            "type": "influxdb",
            "uid": "P3C6603E967DC8568"
          },
          "query": "data = from(bucket:\"sino_quotes\")\r\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\r\n  |> filter(fn: (r) => r._measurement == \"tick\")\r\n  |> filter(fn: (r) => r.code == ${Code3:doublequote})\r\n  |> filter(fn: (r) => r._field == \"close\")\r\n  |> drop(columns: [\"code\", \"_measurement\"])\r\n\r\ndata_open = data\r\n  |> aggregateWindow(every: ${Kbar_Freq}, fn: first)\r\n  |> set(key: \"_field\", value: \"open\")\r\n\r\ndata_close = data\r\n  |> aggregateWindow(every: ${Kbar_Freq}, fn: last)\r\n  |> set(key: \"_field\", value: \"close\")\r\n\r\ndata_high = data\r\n  |> aggregateWindow(every: ${Kbar_Freq}, fn: max)\r\n  |> set(key: \"_field\", value: \"high\")\r\n\r\ndata_low = data\r\n  |> aggregateWindow(every: ${Kbar_Freq}, fn: min)\r\n  |> set(key: \"_field\", value: \"low\")\r\n\r\n\r\ndata_vol = from(bucket:\"sino_quotes\")\r\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\r\n  |> filter(fn: (r) => r._measurement == \"tick\")\r\n  |> filter(fn: (r) => r.code == ${Code3:doublequote})\r\n  |> filter(fn: (r) => r._field == \"volume\")\r\n  |> drop(columns: [\"code\", \"_measurement\"])\r\n  |> aggregateWindow(every: ${Kbar_Freq}, fn: sum)\r\n\r\nunion(tables: [data_open, data_close, data_high, data_low, data_vol])\r\n",
          "refId": "A"
        }
      ],
      "title": "(3)  ${Code3}",
      "type": "candlestick"
    },
    {
      "description": "",
      "fieldConfig": {
        "defaults": {
          "color": {
            "mode": "palette-classic"
          },
          "custom": {
            "axisLabel": "",
            "axisPlacement": "auto",
            "barAlignment": 0,
            "drawStyle": "line",
            "fillOpacity": 0,
            "gradientMode": "none",
            "hideFrom": {
              "legend": false,
              "tooltip": false,
              "viz": false
            },
            "lineInterpolation": "linear",
            "lineWidth": 1,
            "pointSize": 5,
            "scaleDistribution": {
              "type": "linear"
            },
            "showPoints": "auto",
            "spanNulls": false,
            "stacking": {
              "group": "A",
              "mode": "none"
            },
            "thresholdsStyle": {
              "mode": "off"
            }
          },
          "mappings": [],
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "green",
                "value": null
              },
              {
                "color": "red",
                "value": 80
              }
            ]
          }
        },
        "overrides": []
      },
      "gridPos": {
        "h": 11,
        "w": 12,
        "x": 12,
        "y": 11
      },
      "id": 5,
      "options": {
        "candleStyle": "candles",
        "colorStrategy": "open-close",
        "colors": {
          "down": "red",
          "up": "green"
        },
        "includeAllFields": false,
        "legend": {
          "calcs": [],
          "displayMode": "list",
          "placement": "bottom"
        },
        "mode": "candles+volume"
      },
      "targets": [
        {
          "datasource": {
            "type": "influxdb",
            "uid": "P3C6603E967DC8568"
          },
          "query": "data = from(bucket:\"sino_quotes\")\r\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\r\n  |> filter(fn: (r) => r._measurement == \"tick\")\r\n  |> filter(fn: (r) => r.code == ${Code4:doublequote})\r\n  |> filter(fn: (r) => r._field == \"close\")\r\n  |> drop(columns: [\"code\", \"_measurement\"])\r\n\r\ndata_open = data\r\n  |> aggregateWindow(every: ${Kbar_Freq}, fn: first)\r\n  |> set(key: \"_field\", value: \"open\")\r\n\r\ndata_close = data\r\n  |> aggregateWindow(every: ${Kbar_Freq}, fn: last)\r\n  |> set(key: \"_field\", value: \"close\")\r\n\r\ndata_high = data\r\n  |> aggregateWindow(every: ${Kbar_Freq}, fn: max)\r\n  |> set(key: \"_field\", value: \"high\")\r\n\r\ndata_low = data\r\n  |> aggregateWindow(every: ${Kbar_Freq}, fn: min)\r\n  |> set(key: \"_field\", value: \"low\")\r\n\r\n\r\ndata_vol = from(bucket:\"sino_quotes\")\r\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\r\n  |> filter(fn: (r) => r._measurement == \"tick\")\r\n  |> filter(fn: (r) => r.code == ${Code4:doublequote})\r\n  |> filter(fn: (r) => r._field == \"volume\")\r\n  |> drop(columns: [\"code\", \"_measurement\"])\r\n  |> aggregateWindow(every: ${Kbar_Freq}, fn: sum)\r\n  |> set(key: \"_field\", value: \"volume\")\r\n\r\nunion(tables: [data_open, data_close, data_high, data_low, data_vol])\r\n",
          "refId": "A"
        }
      ],
      "title": "(4)  ${Code4}",
      "type": "candlestick"
    }
  ],
  "refresh": false,
  "schemaVersion": 33,
  "style": "dark",
  "tags": [],
  "templating": {
    "list": [
      {
        "current": {
          "selected": false,
          "text": "2330",
          "value": "2330"
        },
        "definition": "from(bucket:\"sino_quotes\")\r\n  |> range(start: 0)\r\n  |> filter(fn: (r) => r._measurement == \"tick\")\r\n  |> last()\r\n  |> keep(columns: [\"code\"])\r\n  |> group()\r\n  |> distinct(column: \"code\")\r\n  ",
        "description": "available code",
        "hide": 0,
        "includeAll": false,
        "label": "Code1",
        "multi": false,
        "name": "Code1",
        "options": [],
        "query": "from(bucket:\"sino_quotes\")\r\n  |> range(start: 0)\r\n  |> filter(fn: (r) => r._measurement == \"tick\")\r\n  |> last()\r\n  |> keep(columns: [\"code\"])\r\n  |> group()\r\n  |> distinct(column: \"code\")\r\n  ",
        "refresh": 1,
        "regex": "",
        "skipUrlSync": false,
        "sort": 1,
        "type": "query"
      },
      {
        "current": {
          "selected": true,
          "text": "2014",
          "value": "2014"
        },
        "definition": "from(bucket:\"sino_quotes\")\r\n  |> range(start: 0)\r\n  |> filter(fn: (r) => r._measurement == \"tick\")\r\n  |> last()\r\n  |> keep(columns: [\"code\"])\r\n  |> group()\r\n  |> distinct(column: \"code\")\r\n  ",
        "description": "available code",
        "hide": 0,
        "includeAll": false,
        "label": "Code2",
        "multi": false,
        "name": "Code2",
        "options": [],
        "query": "from(bucket:\"sino_quotes\")\r\n  |> range(start: 0)\r\n  |> filter(fn: (r) => r._measurement == \"tick\")\r\n  |> last()\r\n  |> keep(columns: [\"code\"])\r\n  |> group()\r\n  |> distinct(column: \"code\")\r\n  ",
        "refresh": 1,
        "regex": "",
        "skipUrlSync": false,
        "sort": 1,
        "type": "query"
      },
      {
        "current": {
          "selected": false,
          "text": "2454",
          "value": "2454"
        },
        "definition": "from(bucket:\"sino_quotes\")\r\n  |> range(start: 0)\r\n  |> filter(fn: (r) => r._measurement == \"tick\")\r\n  |> last()\r\n  |> keep(columns: [\"code\"])\r\n  |> group()\r\n  |> distinct(column: \"code\")\r\n  ",
        "description": "available code",
        "hide": 0,
        "includeAll": false,
        "label": "Code3",
        "multi": false,
        "name": "Code3",
        "options": [],
        "query": "from(bucket:\"sino_quotes\")\r\n  |> range(start: 0)\r\n  |> filter(fn: (r) => r._measurement == \"tick\")\r\n  |> last()\r\n  |> keep(columns: [\"code\"])\r\n  |> group()\r\n  |> distinct(column: \"code\")\r\n  ",
        "refresh": 1,
        "regex": "",
        "skipUrlSync": false,
        "sort": 1,
        "type": "query"
      },
      {
        "current": {
          "selected": true,
          "text": "2002",
          "value": "2002"
        },
        "definition": "from(bucket:\"sino_quotes\")\r\n  |> range(start: 0)\r\n  |> filter(fn: (r) => r._measurement == \"tick\")\r\n  |> last()\r\n  |> keep(columns: [\"code\"])\r\n  |> group()\r\n  |> distinct(column: \"code\")\r\n  ",
        "description": "available code",
        "hide": 0,
        "includeAll": false,
        "label": "Code4",
        "multi": false,
        "name": "Code4",
        "options": [],
        "query": "from(bucket:\"sino_quotes\")\r\n  |> range(start: 0)\r\n  |> filter(fn: (r) => r._measurement == \"tick\")\r\n  |> last()\r\n  |> keep(columns: [\"code\"])\r\n  |> group()\r\n  |> distinct(column: \"code\")\r\n  ",
        "refresh": 1,
        "regex": "",
        "skipUrlSync": false,
        "sort": 1,
        "type": "query"
      },
      {
        "current": {
          "selected": true,
          "text": "1m",
          "value": "1m"
        },
        "hide": 0,
        "includeAll": false,
        "multi": false,
        "name": "Kbar_Freq",
        "options": [
          {
            "selected": false,
            "text": "1s",
            "value": "1s"
          },
          {
            "selected": true,
            "text": "1m",
            "value": "1m"
          },
          {
            "selected": false,
            "text": "5m",
            "value": "5m"
          },
          {
            "selected": false,
            "text": "15m",
            "value": "15m"
          },
          {
            "selected": false,
            "text": "1h",
            "value": "1h"
          },
          {
            "selected": false,
            "text": "1d",
            "value": "1d"
          }
        ],
        "query": "1s, 1m, 5m, 15m, 1h, 1d",
        "queryValue": "",
        "skipUrlSync": false,
        "type": "custom"
      }
    ]
  },
  "time": {
    "from": "2022-03-28T04:38:39.727Z",
    "to": "2022-03-28T05:46:29.292Z"
  },
  "timepicker": {
    "refresh_intervals": [
      "250ms",
      "1s",
      "5s",
      "10s",
      "30s",
      "1m",
      "5m",
      "15m",
      "30m",
      "1h",
      "2h",
      "1d"
    ]
  },
  "timezone": "",
  "title": "Demo - InfluxDB2 - Stocks",
  "uid": "TGf2S4y7z",
  "version": 10,
  "weekStart": ""
}